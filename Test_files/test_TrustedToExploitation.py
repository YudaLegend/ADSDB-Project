import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../Python_files')))

import unittest
from unittest.mock import MagicMock, patch
import pandas as pd
from TrustedToExploitation import mergeTables


# Simulate the duckdb database connection
class MockResult:
    def __init__(self, df):
        self._df = df

    def df(self):
        return self._df

class TestTrustedToExploitation(unittest.TestCase):

    def test_mergeTables_success(self):
        # Setup mock connections
        mock_con = MagicMock()
        mock_excon = MagicMock()

        # Create actual DataFrames to return from the mocks
        steam_game_info_df = pd.DataFrame({
            "steam_appid": [1, 2],
            "name": ["Game A", "Game B"],
            "type": ["game", "game"],
            "genre": ["Action", "RPG"],
            "recommendations": [1000, 500]
        })

        steam_spy_df = pd.DataFrame({
            "appid": [1, 2],
            "positive": [85, 90],
            "negative": [15, 5]
        })

        steam_players_df = pd.DataFrame({
            "app_id": [1, 2],
            "players": [1000, 1500]
        })

        # Mock the data retrieval for each table
        mock_con.execute.side_effect = [
            MockResult(steam_game_info_df),  # Return a MockResult object
            MockResult(steam_spy_df),         # Return a MockResult object
            MockResult(steam_players_df)      # Return a MockResult object
        ]

        # Run mergeTables
        result = mergeTables(mock_con, mock_excon)

        # Assertions to verify that mergeTables worked as expected
        self.assertTrue(result)
        mock_con.execute.assert_any_call("SELECT * FROM steam_game_info")
        mock_con.execute.assert_any_call("SELECT * FROM steam_spy")
        mock_con.execute.assert_any_call("SELECT * FROM steam_players")
        mock_excon.execute.assert_called_once_with("CREATE TABLE IF NOT EXISTS steam_games AS SELECT * FROM merge2")


    def test_mergeTables_inconsistent_columns(self):
        # Setup mock connections
        mock_con = MagicMock()
        mock_excon = MagicMock()

        # Create actual DataFrames to return from the mocks
        steam_game_info_df = pd.DataFrame({
            "no_id": [1, 2],
            "name": ["Game A", "Game B"],
            "type": ["game", "game"],
            "genre": ["Action", "RPG"],
            "recommendations": [1000, 500]
        })

        steam_spy_df = pd.DataFrame({
            "appid": [1, 2],
            "positive": [85, 90],
            "negative": [15, 5]
        })

        steam_players_df = pd.DataFrame({
            "app_id": [1, 2],
            "players": [1000, 1500]
        })

         # Mock the data retrieval for each table
        mock_con.execute.side_effect = [
            MockResult(steam_game_info_df),  # Return a MockResult object
            MockResult(steam_spy_df),         # Return a MockResult object
            MockResult(steam_players_df)      # Return a MockResult object
        ]

        # Expect mergeTables to fail due to column mismatch
        result = mergeTables(mock_con, mock_excon)
        self.assertFalse(result)


    def test_mergeTables_no_game_type(self):
        # Setup mock connections
        mock_con = MagicMock()
        mock_excon = MagicMock()

        # Create actual DataFrames to return from the mocks
        steam_game_info_df = pd.DataFrame({
            "steam_appid": [1, 2],
            "name": ["DLC A", "Music B"],
            "type": ["dlc", "music"],
            "genre": ["Action", "RPG"],
            "recommendations": [1000, 500]
        })

        steam_spy_df = pd.DataFrame({
            "appid": [1, 2],
            "positive": [85, 90],
            "negative": [15, 5]
        })

        steam_players_df = pd.DataFrame({
            "app_id": [1, 2],
            "players": [1000, 1500]
        })

         # Mock the data retrieval for each table
        mock_con.execute.side_effect = [
            MockResult(steam_game_info_df),  # Return a MockResult object
            MockResult(steam_spy_df),         # Return a MockResult object
            MockResult(steam_players_df)      # Return a MockResult object
        ]

        # Run mergeTables and expect it to filter out all entries
        result = mergeTables(mock_con, mock_excon)
        self.assertTrue(result)
        mock_excon.execute.assert_called_once_with("CREATE TABLE IF NOT EXISTS steam_games AS SELECT * FROM merge2")


if __name__ == "__main__":
    unittest.main()
