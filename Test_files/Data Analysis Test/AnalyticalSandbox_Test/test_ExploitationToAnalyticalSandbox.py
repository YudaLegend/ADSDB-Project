import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../Python_files/Data_Analysis/AnalyticalSandbox_Zone')))

import unittest
from unittest.mock import patch
import pandas as pd
from ExploitationToAnalyticalSandbox import create_folders # type: ignore

class TestCreateFolders(unittest.TestCase):

    @patch('os.makedirs')  
    def test_create_folders_success(self, mock_makedirs):
        
        # Call the function to test
        result = create_folders()

        # Check if os.makedirs was called with the expected arguments
        mock_makedirs.assert_any_call('./Data Analysis', exist_ok=True)  # Check if base folder is created
        mock_makedirs.assert_any_call('./Data Analysis\AnalyticalSandbox Zone', exist_ok=True)
        mock_makedirs.assert_any_call('./Data Analysis\FeatureEngineering Zone', exist_ok=True)
        mock_makedirs.assert_any_call('./Data Analysis\ModelGeneration Zone', exist_ok=True)

        self.assertTrue(result)
        
    @patch('os.makedirs')  # Mock os.makedirs method
    def test_create_folders_error(self, mock_makedirs):
        # Simulate that makedirs raises an exception
        mock_makedirs.side_effect = Exception("Error creating folder")

        # Call the function to test
        result = create_folders()

        # Check if the function returned False due to the error
        self.assertFalse(result)

        # Check if os.makedirs was called for each folder
        mock_makedirs.assert_any_call('./Data Analysis', exist_ok=True)
    

if __name__ == '__main__':
    unittest.main()