import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../Python_files/Data_Management/Exploitation_Zone')))

import unittest
from unittest.mock import MagicMock
import pandas as pd
from ExploitationQualityKPI import mergeTableQuality # type: ignore

class TestExploitationQualityKPI(unittest.TestCase):

    def test_mergeTableQuality_success(self):
        # Mock database connection
        mock_con = MagicMock()
        
        # Create mock DataFrame for steam_games table
        mock_con.execute.return_value.df.return_value = pd.DataFrame({
            "steam_appid": [1, 2],
            "name": ["name1", "name2"],
            "appid": [1, 2],
            "average_2weeks": [0, 0],
            "median_2weeks": [0, 0],
            "discount": [0, 10],
            "app_id": [1, 2],
            "type": ["game", "game"],
            "detailed_description": ["desc1", "desc2"],
            "about_the_game": ["info1", "info2"],
            "short_description": ["short1", "short2"],
            "name_y": ["name1", "name2"],
            "languages": ["UNKNOWN", "French"],
            "supported_languages": ["UNKNOWN", "French"],
            "developers": ["Dev1, UNKNOWN", "Dev2"],
            "developer": ["Dev1", "Dev2"],
            "publishers": ["UNKNOWN", "Pub2"],
            "publisher": ["UNKNOWN", "Pub2"],
            "genre": ["Action", "Action"],
            "genres": ["Action", "Adventure"],
            "userscore": [70, 80],
            "initialprice": [10, 20],
            "price": [10, 20]
        })

        # Run the function
        result = mergeTableQuality(mock_con)

        # Assertions to verify that the function processes data correctly
        self.assertTrue(result)
        
        # Check transformations on languages
        processed_df = mock_con.execute.return_value.df.return_value
        self.assertEqual(processed_df["languages"][0], "UNKNOWN")
        self.assertEqual(processed_df["languages"][1], "French")

        # Check transformations on developers
        self.assertEqual(processed_df["developers"][0], "Dev1")
        self.assertEqual(processed_df["developers"][1], "Dev2")

        # Check transformations on publishers
        self.assertEqual(processed_df["publishers"][0], "UNKNOWN")
        self.assertEqual(processed_df["publishers"][1], "Pub2")

    def test_mergeTableQuality_missing_columns(self):
        # Mock database connection with missing columns
        mock_con = MagicMock()
        mock_con.execute.return_value.df.return_value = pd.DataFrame({
            "appid": [1, 2],
            "discount": [10, 20],
            "languages": ["English", "French"],
            "developers": ["Dev1", "Dev2"],
            "publishers": ["Pub1", "Pub2"]
        })

        result = mergeTableQuality(mock_con)

        # Expecting function to raise an error due to missing columns
        self.assertEqual(result, False)

if __name__ == "__main__":
    unittest.main()
