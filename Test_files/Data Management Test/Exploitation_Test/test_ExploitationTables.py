import os
import sys
import unittest
from unittest.mock import MagicMock
import duckdb

# Assuming createTable is in the 'Exploitation_Zone' module
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../Python_files/Data_Management/Exploitation_Zone')))
from ExploitationTables import createTable # type: ignore

class TestCreateTable(unittest.TestCase):

    def setUp(self):
        # Mock DuckDB connection
        self.mock_con = MagicMock()
        self.mock_con.execute = MagicMock()

    def test_createTable_success(self):
        table_name = "test_table"
        table_columns = ["name", "price", "genre"]

        # Call the function
        result = createTable(self.mock_con, table_name, table_columns)

        # Validate that the function returns True and the query was executed
        self.assertTrue(result)
        

    def test_createTable_invalid_columns(self):
        table_name = "test_table"
        table_columns = "name, price, genre"  # Invalid type

        result = createTable(self.mock_con, table_name, table_columns)

        # Validate that no query was executed
        self.assertFalse(result)
        self.mock_con.execute.assert_not_called()

    def test_createTable_invalid_table_name(self):
        """Test with an invalid table name."""
        table_name = 123  # Invalid type
        table_columns = ["name", "price", "genre"]

        result = createTable(self.mock_con, table_name, table_columns)

        # Validate that no query was executed
        self.assertFalse(result)
        self.mock_con.execute.assert_not_called()

    def test_createTable_query_execution_failure(self):
        """Test when query execution fails."""
        self.mock_con.execute.side_effect = Exception("Execution error")
        table_name = "test_table"
        table_columns = ["name", "price", "genre"]

        result = createTable(self.mock_con, table_name, table_columns)

        # Validate that the function returns False
        self.assertFalse(result)
        self.mock_con.execute.assert_called_once()

if __name__ == "__main__":
    unittest.main()
