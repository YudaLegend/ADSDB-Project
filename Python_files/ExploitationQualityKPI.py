

def mergeTableQuality(con):
    try:
        df = con.execute("SELECT * FROM steam_games;").df()
        df.drop(columns=['appid', 'average_2weeks', 'median_2weeks', 'discount', 'app_id', 'type', 'detailed_description', 
                    'about_the_game', 'short_description', 'name_y'], inplace=True)
        
        df['languages'] = df[['languages', 'supported_languages']].apply(lambda x: ', '.join(set(', '.join(x).split(', '))), axis=1)
        df['languages'] = df['languages'].str.replace(', UNKNOWN', '')
        df['languages'] = df['languages'].str.replace('UNKNOWN,', '')
        df['languages'] = df['languages'].str.replace(' ', '')
        df['languages'] = df['languages'].str.replace(',',', ')

        df['developers'] = df[['developers', 'developer']].apply(lambda x: ', '.join(set(', '.join(x).split(', '))), axis=1)
        
        df['developers'] = df['developers'].str.replace(', UNKNOWN', '')
        df['developers'] = df['developers'].str.replace('UNKNOWN,', '')
        df['developers'] = df['developers'].str.replace(' ', '')
        df['developers'] = df['developers'].str.replace(',',', ')
        
        df['publishers'] = df[['publishers', 'publisher']].apply(lambda x: ', '.join(set(', '.join(x).split(', '))), axis=1)
        df['publishers'] = df['publishers'].str.replace(', UNKNOWN', '')
        df['publishers'] = df['publishers'].str.replace('UNKNOWN,', '')
        df['publishers'] = df['publishers'].str.replace(' ', '')
        df['publishers'] = df['publishers'].str.replace(',',', ')
        
        df['genres'] = df[['genres', 'genre']].apply(lambda x: ', '.join(set(', '.join(x).split(', '))), axis=1)
        df['genres'] = df['genres'].str.replace(', UNKNOWN', '')
        df['genres'] = df['genres'].str.replace('UNKNOWN,', '')
        df['genres'] = df['genres'].str.replace(' ', '')
        df['genres'] = df['genres'].str.replace(',',', ')
        
        df.drop(columns=['developer', 'publisher','supported_languages', 'genre'], inplace=True)
        df.rename(columns={'name_x': 'name', 'ccu': 'previous_day_ccu'}, inplace=True)
        df.drop(columns=['userscore', 'initialprice', 'price'], inplace=True)
        
        con.execute("DROP TABLE steam_games;")
        con.execute("CREATE TABLE steam_games AS SELECT * FROM df;")
    except Exception as e:
        print("Error doing the data quality in exploitation zone: ", e)
        return False
    return True


def createKPIsTable(con):
    try:
        df = con.execute("SELECT * FROM steam_games;").df()
        game_satisaction = df['positive'] / (df['positive'] + df['negative'])

        game_popularity = df['owners']

        game_active_players_2days = (df['player_count'] + df['previous_day_ccu']) / df['owners']

        recommendation_ratio = df['recommendations'] / df['owners']

        average_playtime = df['average_forever']

        median_playtime = df['median_forever']

        kpi_df = df[['name', 'release_date', 'developers', 'publishers', 'initial_price', 'final_price', 'languages', 'genres', 'categories']].copy()

        kpi_df['game_satisaction'] = game_satisaction

        kpi_df['game_popularity'] = game_popularity

        kpi_df['game_active_players_2days'] = game_active_players_2days

        kpi_df['recommendation_ratio'] = recommendation_ratio

        kpi_df['average_playtime'] = average_playtime

        kpi_df['median_playtime'] = median_playtime

        con.execute("CREATE TABLE IF NOT EXISTS steam_games_kpi AS SELECT * FROM kpi_df;")
    except Exception as e:
        print("Error creating KPIs table: ", e)
        return False
    return True
